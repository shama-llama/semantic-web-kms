[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semantic-web-kms"
version = "0.1.0"
description = "Semantic Web Knowledge Management System"
authors = [
    {name = "Group One, CoSc 6232 (Spring 2025)", email = "semanticwebkms@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
keywords = ["semantic-web", "knowledge-management", "ontology", "rdf", "sparql"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    "rdflib==7.1.4",
    "rich==13.7.1",
    "gitpython==3.1.44",
    "tree-sitter==0.21.3",
    "tree-sitter-languages==1.10.2",
    "markdown-it-py==3.0.0",
    "Pillow==10.3.0",
    "flask==3.1.1",
    "flask-caching==2.3.1",
    "flask-cors==6.0.1",
    "requests==2.32.4",
    "python-dotenv==1.1.1",
    "jinja2==3.1.6",
    "spacy==3.8.7",
    "nltk==3.9.1",
    "textstat==0.7.7",
    "google-genai==1.25.0",
    "scikit-learn==1.7.0",
    "networkx==3.5",
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "flake8==7.3.0",
    "mypy==1.16.1",
    "black==25.1.0",
    "isort==6.0.1",
    "pydocstyle==6.3.0",
    "vulture==2.14",
    "pyright==1.1.402",
    "pip-audit==2.9.0",
    "bandit==1.8.6",
    "build==1.2.2.post1",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]
known_third_party = [
    "rdflib", "rich", "git", "tree_sitter", "tree_sitter_languages", 
    "markdown_it", "flask", "requests", "jinja2", "spacy", "nltk", 
    "textstat", "google_genai", "sklearn", "networkx"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "rdflib.*",
    "spacy.*",
    "nltk.*",
    "sklearn.*",
    "networkx.*",
    "google_genai.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
filterwarnings = [
    "ignore::DeprecationWarning:click.*",
    "ignore::DeprecationWarning:weasel.*",
    "ignore:Importing 'parser.split_arg_string' is deprecated:DeprecationWarning",
]

# coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/\.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "def __str__",
    "def __init__",
]

[tool.coverage.html]
directory = "htmlcov"

# flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "htmlcov",
    ".mypy_cache",
]

# pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D107", "D200", "D205", "D400", "D401", "D415"]

# bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# setuptools configuration
[tool.setuptools.packages.find]
include = ["app*"]
exclude = [
    "tests*", "scripts*", "docs*", "portal*", "mappings*", 
    "model*", "output*", "logs*", "test_data*", "ontologies*"
] 